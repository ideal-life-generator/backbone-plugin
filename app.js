// Generated by CoffeeScript 1.8.0
(function() {
  define(["global/render.template", "global/loader.view", "plugin/phone.mask", "component/field/first.name", "component/field/last.name", "component/field/mobile", "component/field/age", "component/field/gender", "plugin/route"], function(RenderTemplate, LoaderView, PhoneMask, FirstName, LastName, Mobile, Age, Gender, Route) {
    return $(function() {
      var PageRoute, UserModel, UserView, UsersCollection, UsersView, persons, route;
      route = new Route({
        "product": {
          path: "page/product/view",
          initialize: function(ProductView) {
            console.log("product initialize");
            return new ProductView;
          },
          first: function(productView) {
            console.log("product first");
            $(".product-view-container").append(productView.$el);
            return TweenLite.to(productView.$el, 0.6, {
              css: {
                opacity: 1
              }
            });
          },
          last: function(productView) {
            console.log("product list last");
            return TweenLite.to(productView.$el, 1, {
              css: {
                opacity: 0
              },
              onComplete: function() {
                return productView.remove();
              }
            });
          },
          show: function(productView) {
            console.log("product show");
            return TweenLite.fromTo(productView.$el, 1, {
              display: "block"
            }, {
              css: {
                opacity: 1
              }
            });
          },
          hide: function(productView) {
            console.log("product hide");
            return TweenLite.to(productView.$el, 1, {
              css: {
                opacity: 0
              },
              onComplete: function() {
                return productView.$el.css({
                  display: "none"
                });
              }
            });
          }
        },
        "product.list": {
          path: "page/product/list/view",
          initialize: function(ProductListView) {
            console.log("product list initialize");
            return new ProductListView;
          },
          first: function(productListView) {
            console.log("product list first");
            $(".list-view-container").append(productListView.$el);
            return TweenLite.to(productListView.$el, 1, {
              css: {
                opacity: 1
              }
            });
          },
          last: function(productListView) {
            console.log("product list last");
            return TweenLite.to(productListView.$el, 1, {
              css: {
                opacity: 0
              },
              onComplete: function() {
                return productListView.remove();
              }
            });
          },
          show: function(productListView) {
            console.log("product list show");
            return TweenLite.fromTo(productListView.$el, 1, {
              display: "block"
            }, {
              css: {
                opacity: 1
              }
            });
          },
          hide: function(productListView) {
            console.log("product list hide");
            return TweenLite.to(productListView.$el, 1, {
              css: {
                opacity: 0
              },
              onComplete: function() {
                return productListView.$el.css({
                  display: "none"
                });
              }
            });
          }
        },
        "product.list.info": {
          path: "page/product/list/info/view",
          initialize: function(ProductListInfoView, params) {
            var productListInfoView;
            console.log("product list info initialize");
            productListInfoView = new ProductListInfoView;
            productListInfoView.$el.append("<h3>" + params['info-id'] + "</h3>");
            return productListInfoView;
          },
          first: function(productListInfoView) {
            console.log("product list info first");
            $(".info-view-container").append(productListInfoView.$el);
            return TweenLite.to(productListInfoView.$el, 1, {
              css: {
                opacity: 1
              }
            });
          },
          last: function(productListInfoView) {
            console.log("product list info last");
            return TweenLite.to(productListInfoView.$el, 1, {
              css: {
                opacity: 0
              },
              onComplete: function() {
                return productListInfoView.remove();
              }
            });
          },
          show: function(productListInfoView) {
            console.log("product list info show");
            return TweenLite.fromTo(productListInfoView.$el, 1, {
              display: "block"
            }, {
              css: {
                opacity: 1
              }
            });
          },
          hide: function(productListInfoView) {
            console.log("product list info hide");
            return TweenLite.to(productListInfoView.$el, 1, {
              css: {
                opacity: 0
              },
              onComplete: function() {
                return productListInfoView.$el.css({
                  display: "none"
                });
              }
            });
          }
        },
        "contact": {
          path: "page/contact/view",
          initialize: function(ContactView) {
            console.log("contact initialize");
            return new ContactView;
          },
          first: function(contactView) {
            console.log("contact first");
            $(".product-view-container").append(contactView.$el);
            return TweenLite.to(contactView.$el, 0.6, {
              css: {
                opacity: 1
              }
            });
          },
          last: function(contactView) {
            console.log("contact list last");
            return TweenLite.to(contactView.$el, 1, {
              css: {
                opacity: 0
              },
              onComplete: function() {
                return contactView.remove();
              }
            });
          },
          show: function(contactView) {
            console.log("contact show");
            return TweenLite.fromTo(contactView.$el, 1, {
              display: "block"
            }, {
              css: {
                opacity: 1
              }
            });
          },
          hide: function(contactView) {
            console.log("contact hide");
            return TweenLite.to(contactView.$el, 1, {
              css: {
                opacity: 0
              },
              onComplete: function() {
                return contactView.$el.css({
                  display: "none"
                });
              }
            });
          }
        }
      });
      PageRoute = Backbone.Router.extend({
        routes: {
          "product": function() {
            return route.load({
              state: "product"
            });
          },
          "product/list": function() {
            return route.load({
              state: "product.list"
            });
          },
          "product/list/info-:id": function(id) {
            return route.load({
              state: "product.list.info",
              init: {
                "product.list.info": {
                  "info-id": id
                }
              }
            });
          },
          "contact": function() {
            return route.load({
              state: "contact"
            });
          }
        }
      });
      new PageRoute;
      persons = [
        {
          id: 0,
          first_name: "Vladislav",
          last_name: "Tkachenko",
          phone: "+380936124991",
          gender: "male",
          age: "27"
        }, {
          id: 1,
          first_name: "Kristina",
          last_name: "Tkachenko",
          phone: "",
          gender: "female",
          age: "21"
        }
      ];
      UserModel = Backbone.Model.extend({
        url: "/documents/7/notes/101",
        defaults: function() {
          return {
            first_name: new String,
            last_name: new String,
            phone: new String,
            age: new String,
            gender: new String
          };
        }
      });
      UserView = Backbone.View.extend({
        tagName: "div",
        className: "my-tr",
        template: _.template("<div class=\"my-td\"> <span>{first_name}</span> </div> <div class=\"my-td\"> <span>{last_name}</span> </div> <div class=\"my-td\"> <span>{phone}</span> </div> <div class=\"my-td\"> <span>{age}</span> </div> <div class=\"my-td\"> <span>{gender}</span> </div> <div class=\"my-td\"> <button class=\"button tiny radius expand\"> Delete </button> </div>"),
        events: {
          "click button": function() {
            return this.model.destroy();
          }
        },
        render: function() {
          return this.$el.append(this.template(this.model.toJSON()));
        },
        initialize: function() {
          this.listenTo(this.model, "destroy", this.remove);
          return this.render();
        }
      });
      UsersCollection = Backbone.Collection.extend({
        model: UserModel,
        comparatorProp: "first_name",
        comparator: function(user) {
          return user.get(this.comparatorProp).toLowerCase();
        },
        setComparator: function(propName) {
          this.comparatorProp = propName;
          return this.sort();
        }
      });
      UsersView = Backbone.View.extend({
        el: "#user-list",
        collection: new UsersCollection(persons),
        events: {
          "click #first-name-header": function() {
            return this.collection.setComparator("first_name");
          },
          "click #last-name-header": function() {
            return this.collection.setComparator("last_name");
          },
          "click #phone-header": function() {
            return this.collection.setComparator("phone");
          },
          "click #age-header": function() {
            return this.collection.setComparator("age");
          },
          "click #gender-header": function() {
            return this.collection.setComparator("gender");
          },
          "click #create-user-header": ((function(_this) {
            return function(params) {
              return function() {
                if (this.creationMenuActive) {
                  this.creationMenuActive = false;
                  params.height = this.$creationMenuWrap.height();
                  return TweenLite.to(params, 0.3, {
                    onStart: (function(_this) {
                      return function() {
                        return _this.$creationMenuWrap.css({
                          perspective: "1600px",
                          transformStyle: "preserve-3d"
                        });
                      };
                    })(this),
                    height: 0,
                    opacity: 0,
                    translateY: -47,
                    translateZ: -23.5,
                    rotateX: 90,
                    ease: Power0.easeInOut,
                    onUpdate: (function(_this) {
                      return function() {
                        _this.$creationMenuWrap.css({
                          height: "" + params.height + "px"
                        });
                        return _this.$creationMenu.css({
                          opacity: params.opacity,
                          transform: "translateY(" + params.translateY + "%) translateZ(" + params.translateZ + "px) rotateX(" + params.rotateX + "deg)"
                        });
                      };
                    })(this),
                    onComplete: (function(_this) {
                      return function() {
                        _this.$creationMenuWrap.css({
                          perspective: "",
                          transformStyle: ""
                        });
                        return _this.$creationMenu.css({
                          opacity: "",
                          transform: ""
                        });
                      };
                    })(this)
                  });
                } else {
                  this.creationMenuActive = true;
                  return TweenLite.to(params, 0.3, {
                    onStart: (function(_this) {
                      return function() {
                        return _this.$creationMenuWrap.css({
                          perspective: "1600px",
                          transformStyle: "preserve-3d"
                        });
                      };
                    })(this),
                    height: this.$creationMenu.height(),
                    opacity: 1,
                    translateY: 0,
                    translateZ: 0,
                    rotateX: 0,
                    ease: Power0.easeInOut,
                    onUpdate: (function(_this) {
                      return function() {
                        _this.$creationMenuWrap.css({
                          height: "" + params.height + "px"
                        });
                        return _this.$creationMenu.css({
                          opacity: params.opacity,
                          transform: "translateY(" + params.translateY + "%) translateZ(" + params.translateZ + "px) rotateX(" + params.rotateX + "deg)"
                        });
                      };
                    })(this),
                    onComplete: (function(_this) {
                      return function() {
                        _this.$creationMenuWrap.css({
                          perspective: "",
                          transformStyle: "",
                          height: "100%"
                        });
                        _this.$creationMenu.css({
                          transform: ""
                        });
                        return _this.firstName.$el.focus();
                      };
                    })(this)
                  });
                }
              };
            };
          })(this))({
            height: 0,
            opacity: 0,
            translateY: -47,
            translateZ: -23.5,
            rotateX: 90
          }),
          "click #add-user": function() {
            var age, firstName, gender, lastName, mobile;
            firstName = this.firstName.getValue();
            lastName = this.lastName.getValue();
            mobile = this.mobile.getValue();
            age = this.age.getValue();
            gender = this.gender.getValue();
            if (firstName && lastName && mobile && age && gender) {
              return this.collection.create({
                first_name: firstName,
                last_name: lastName,
                phone: mobile,
                age: age,
                gender: gender
              });
            }
          }
        },
        addUser: function(user) {
          var userView;
          userView = new UserView({
            model: user
          });
          return this.$list.prepend(userView.$el);
        },
        render: function() {
          this.$list.empty();
          return this.collection.each(function(user) {
            var userView;
            userView = new UserView({
              model: user
            });
            return this.$list.append(userView.$el);
          }, this);
        },
        initialize: function() {
          this.$list = this.$el.find("#list");
          this.$creationMenu = this.$el.find("#creation-menu");
          this.$creationMenuWrap = this.$creationMenu.parent("#creation-menu-wrap");
          this.firstName = new FirstName({
            el: $("#first-name")
          });
          this.lastName = new LastName({
            el: $("#last-name")
          });
          this.mobile = new Mobile({
            el: $("#phone")
          });
          this.age = new Age({
            el: $("#age")
          });
          this.gender = new Gender({
            el: $("#gender")
          });
          this.listenTo(this.collection, "sort", this.render);
          this.listenTo(this.collection, "add", this.addUser);
          return this.render();
        }
      });
      new UsersView;
      return Backbone.history.start();
    });
  });

}).call(this);
