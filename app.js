// Generated by IcedCoffeeScript 1.8.0-d
(function() {
  define(["global/render.template", "global/loader.view", "plugin/phone.mask", "component/field/first.name", "component/field/last.name", "component/field/mobile", "component/field/age", "component/field/gender", "plugin/route"], function(RenderTemplate, LoaderView, PhoneMask, FirstName, LastName, Mobile, Age, Gender, Route) {
    return $(function() {
      var PageRoute, animation, route, speed;
      speed = 5;
      animation = {
        first: function(view) {
          var animate;
          view.animationParams.opacity = 0;
          view.animationParams.translateZ = -120;
          animate = new TimelineMax({
            paused: true,
            onUpdate: function() {
              return view.$el.css({
                opacity: view.animationParams.opacity,
                transform: "translateZ(" + view.animationParams.translateZ + "px)"
              });
            }
          });
          animate.to(view.animationParams, 1.6 / speed, {
            opacity: 1,
            translateZ: -180
          });
          animate.to(view.animationParams, 2 / speed, {
            delay: 0.5 / speed,
            ease: Sine.easeOut,
            translateZ: 0
          });
          animate.play();
          return $(".view-container-one").append(view.$el);
        },
        last: function(view) {
          var animate;
          view.animationParams.opacity = 1;
          view.animationParams.translateZ = 0;
          animate = new TimelineMax({
            paused: true,
            onUpdate: function() {
              return view.$el.css({
                opacity: view.animationParams.opacity,
                transform: "translateZ(" + view.animationParams.translateZ + "px)"
              });
            },
            onComplete: function() {
              return view.remove();
            }
          });
          animate.to(view.animationParams, 1.6 / speed, {
            opacity: 0.999,
            translateZ: -180
          });
          animate.to(view.animationParams, 2 / speed, {
            delay: 0.5 / speed,
            ease: Sine.easeOut,
            opacity: 0,
            translateZ: -120
          });
          return animate.play();
        },
        centerLeft: function(view) {
          var animate;
          view.animationParams.opacity = 1;
          view.animationParams.translateZ = 0;
          view.animationParams.translateX = 0;
          view.animationParams.rotateY = 0;
          view.$el.css({
            transformOrigin: "100% 0"
          });
          animate = new TimelineMax({
            paused: true,
            onUpdate: function() {
              return view.$el.css({
                opacity: view.animationParams.opacity,
                transform: "translateZ(" + view.animationParams.translateZ + "px) translateX(" + view.animationParams.translateX + "%) rotateY(" + view.animationParams.rotateY + "deg"
              });
            },
            onComplete: function() {
              return view.remove();
            }
          });
          animate.to(view.animationParams, 1.6 / speed, {
            opacity: 0.999,
            translateZ: -180
          });
          animate.to(view.animationParams, 1.6 / speed, {
            ease: Sine.easeInOut,
            translateX: -105,
            rotateY: 30
          });
          animate.to(view.animationParams, 2 / speed, {
            delay: 0.5 / speed,
            ease: Sine.easeOut,
            opacity: 0,
            translateZ: 0
          });
          return animate.play();
        },
        leftCenter: function(view) {
          var animate;
          view.animationParams.opacity = 0;
          view.animationParams.translateZ = 0;
          view.animationParams.translateX = -105;
          view.animationParams.rotateY = 30;
          view.$el.css({
            transformOrigin: "100% 0"
          });
          animate = new TimelineMax({
            paused: true,
            onUpdate: function() {
              return view.$el.css({
                opacity: view.animationParams.opacity,
                transform: "translateZ(" + view.animationParams.translateZ + "px) translateX(" + view.animationParams.translateX + "%) rotateY(" + view.animationParams.rotateY + "deg"
              });
            }
          });
          animate.to(view.animationParams, 1.6 / speed, {
            opacity: 0.999,
            translateZ: -180
          });
          animate.to(view.animationParams, 1.6 / speed, {
            ease: Sine.easeInOut,
            translateX: 0,
            rotateY: 0
          });
          animate.to(view.animationParams, 2 / speed, {
            delay: 0.5 / speed,
            ease: Sine.easeOut,
            opacity: 1,
            translateZ: 0
          });
          animate.play();
          return $(".view-container-one").append(view.$el);
        },
        centerRight: function(view) {
          var animate;
          view.animationParams.opacity = 1;
          view.animationParams.translateZ = 0;
          view.animationParams.translateX = 0;
          view.animationParams.rotateY = 0;
          view.$el.css({
            transformOrigin: "0 0"
          });
          animate = new TimelineMax({
            paused: true,
            onUpdate: function() {
              return view.$el.css({
                opacity: view.animationParams.opacity,
                transform: "translateZ(" + view.animationParams.translateZ + "px) translateX(" + view.animationParams.translateX + "%) rotateY(" + view.animationParams.rotateY + "deg)"
              });
            }
          });
          animate.to(view.animationParams, 1.6 / speed, {
            opacity: 1,
            translateZ: -180
          });
          animate.to(view.animationParams, 1.6 / speed, {
            ease: Sine.easeInOut,
            translateX: 105,
            rotateY: -30
          });
          animate.to(view.animationParams, 2 / speed, {
            delay: 0.5 / speed,
            ease: Sine.easeOut,
            translateZ: 0
          });
          animate.play();
          return $(".view-container-one").append(view.$el);
        },
        rightCenter: function(view) {
          var animate;
          view.animationParams.opacity = 0;
          view.animationParams.translateZ = 0;
          view.animationParams.translateX = 105;
          view.animationParams.rotateY = -30;
          view.$el.css({
            transformOrigin: "0 0"
          });
          animate = new TimelineMax({
            paused: true,
            onUpdate: function() {
              return view.$el.css({
                opacity: view.animationParams.opacity,
                transform: "translateZ(" + view.animationParams.translateZ + "px) translateX(" + view.animationParams.translateX + "%) rotateY(" + view.animationParams.rotateY + "deg)"
              });
            }
          });
          animate.to(view.animationParams, 1.6 / speed, {
            opacity: 1,
            translateZ: -180
          });
          animate.to(view.animationParams, 1.6 / speed, {
            ease: Sine.easeInOut,
            translateX: 0,
            rotateY: 0
          });
          animate.to(view.animationParams, 2 / speed, {
            delay: 0.5 / speed,
            ease: Sine.easeOut,
            translateZ: 0
          });
          animate.play();
          return $(".view-container-one").append(view.$el);
        }
      };
      route = new Route({
        routes: {
          "product": {
            path: "page/product/view",
            selector: ".view-container-one",
            priority: "00",
            init: function(ProductView, person) {
              var productView;
              console.log("product initialize");
              productView = new ProductView;
              productView.animationParams = {};
              productView.render(person);
              return productView;
            },
            animation: {
              first: animation.first,
              last: animation.last,
              centerLeft: animation.centerLeft,
              leftCenter: animation.leftCenter,
              centerRight: animation.centerRight,
              rightCenter: animation.rightCenter
            }
          },
          "contact": {
            path: "page/contact/view",
            selector: ".view-container-one",
            priority: "01",
            init: function(ContactView) {
              var contactView;
              console.log("contact initialize");
              contactView = new ContactView;
              contactView.animationParams = {};
              return contactView;
            },
            animation: {
              first: animation.first,
              last: animation.last,
              centerLeft: animation.centerLeft,
              leftCenter: animation.leftCenter,
              centerRight: animation.centerRight,
              rightCenter: animation.rightCenter
            }
          }
        }
      });
      PageRoute = Backbone.Router.extend({
        routes: {
          "product": function() {
            return route.load({
              state: "product",
              param: {
                product: {
                  name: "Vlad"
                }
              }
            });
          },
          "product/list": function() {
            return route.load({
              state: "product.list"
            });
          },
          "product/list/info-:id": function(id) {
            return route.load({
              state: "product.list.info",
              init: {
                "product.list.info": {
                  "info-id": id
                }
              }
            });
          },
          "contact": function() {
            return route.load({
              state: "contact"
            });
          }
        }
      });
      return Backbone.history.start();
    });
  });

}).call(this);
