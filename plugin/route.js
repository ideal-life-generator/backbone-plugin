// Generated by CoffeeScript 1.8.0
(function() {
  define(function() {
    var StateMenager;
    return StateMenager = (function() {
      var StateFactory, _parseNested, _stateFactory;

      StateFactory = (function() {
        var NestedStateLoader, StateLoader;

        function StateFactory() {}

        StateLoader = (function() {
          function StateLoader(path) {
            var defer;
            defer = $.Deferred();
            require([path], (function(_this) {
              return function(View) {
                return setTimeout(function() {
                  return defer.resolve(View);
                }, 300);
              };
            })(this));
            this.promise = defer.promise();
          }

          return StateLoader;

        })();

        NestedStateLoader = (function() {
          function NestedStateLoader(path, parent) {
            var defer;
            defer = $.Deferred();
            require([path], (function(_this) {
              return function(View) {
                return setTimeout(function() {
                  return parent.promise.then(function() {
                    return defer.resolve(View);
                  });
                }, path === "page/product/list/view" ? 150 : 0);
              };
            })(this));
            this.promise = defer.promise();
          }

          return NestedStateLoader;

        })();

        StateFactory.prototype.create = function(name, parent) {
          if (!parent) {
            return new StateLoader(name);
          } else {
            return new NestedStateLoader(name, parent);
          }
        };

        return StateFactory;

      })();

      _stateFactory = new StateFactory;

      _parseNested = function(fullname) {
        var current, name, names, _i, _len, _results;
        names = fullname.split(".");
        current = [];
        _results = [];
        for (_i = 0, _len = names.length; _i < _len; _i++) {
          name = names[_i];
          current.push(name);
          _results.push(current.join("."));
        }
        return _results;
      };

      function StateMenager(config) {
        this.config = config;
        this.cache = {};
      }

      StateMenager.prototype.load = function(setting) {
        var config, last, name, names, params, _ref, _results;
        names = _parseNested(setting.state);
        params = setting.init;
        last = null;
        names.forEach((function(_this) {
          return function(name) {
            return (function(currentConfig, current) {
              if (!current) {
                last = current = _this.cache[name] = _stateFactory.create(currentConfig.path, last);
                return current.promise.then(function(ViewInstance) {
                  current.instance = ViewInstance;
                  current.view = currentConfig.initialize(ViewInstance, (params ? params[name] : void 0));
                  currentConfig.first(current.view);
                  return current.status = "first";
                });
              } else if (params && params[name]) {
                currentConfig.last(_this.cache[name].view);
                last = current = _this.cache[name] = _stateFactory.create(currentConfig.path, last);
                return current.promise.then(function(ViewInstance) {
                  current.instance = ViewInstance;
                  current.view = currentConfig.initialize(ViewInstance, params[name]);
                  currentConfig.first(current.view);
                  return current.status = "first";
                });
              } else if (current.status === "hide") {
                currentConfig.show(current.view);
                return current.status = "show";
              }
            })(_this.config[name], _this.cache[name]);
          };
        })(this));
        _ref = this.config;
        _results = [];
        for (name in _ref) {
          config = _ref[name];
          if (names.indexOf(name) === -1) {
            if (this.cache[name] && this.cache[name].view && (this.cache[name].status === "show" || this.cache[name].status === "first")) {
              this.cache[name].status = "hide";
              _results.push(this.config[name].hide(this.cache[name].view));
            } else {
              _results.push(void 0);
            }
          } else {
            _results.push(void 0);
          }
        }
        return _results;
      };

      return StateMenager;

    })();
  });

}).call(this);
